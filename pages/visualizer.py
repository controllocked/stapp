from st_link_analysis import NodeStyle, EdgeStyle, st_link_analysis, Event
import streamlit as st
from db import get_notes_with_tags, get_all_tags, get_tag_name_by_id, get_links_for_notes, get_readable_note_details




def prepare_rendering_data(user_id, selected_tags):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—ç–≥–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    tags = get_all_tags(user_id)
    tags_titles = list(tags.keys())
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç—ç–≥–∏ –≤ –∏—Ö ObjectId
    tag_ids = [tags[tag] for tag in selected_tags if tag in tags]
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç—ç–≥–∞–º
    notes = get_notes_with_tags(user_id, tag_ids)

    # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –∏ —Å–≤—è–∑–∏ –¥–ª—è –≥—Ä–∞—Ñ–∞
    nodes = []
    edges = []
    note_ids = []
    for note in notes:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Ç–µ–≥–æ–≤
        node_tags = [get_tag_name_by_id(tag) for tag in note["tags"]]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
        nodes.append({
            'data': {
                "id": str(note["_id"]),
                "label": "NOTE",
                "title": note["title"],
                "description": note["summary"],
                "tags": ", ".join(node_tags),
            }
        })
        note_ids.append(note["_id"])

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏
    linked_notes = get_links_for_notes(note_ids)
    for note in linked_notes:
        for link in note["links"]:
            edges.append({
                'data': {
                    "id": f"{str(note['_id'])}_{str(link)}",
                    "label": "EDGE",
                    "source": str(note["_id"]),
                    "target": str(link),
                }
            })

    return nodes, edges

@st.dialog("–ó–∞–º–µ—Ç–∫–∞", width='large')
def print_note_dialog(note_id):
    note_info = get_readable_note_details(note_id)
    st.title(note_info['title'])
    st.write(f"–¢—ç–≥–∏üè∑Ô∏è: {', '.join(note_info['tags']) if note_info['tags'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Çü§∑‚Äç‚ôÇÔ∏è'}")
    st.write(f"–°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏(–ª–∏–Ω–∫–∏üîó): {'<->'.join(note_info['links']) if note_info['links'] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
    with st.expander('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', expanded=True):
        st.write(note_info['content'], unsafe_allow_html=True)

def show_visualizer():
    user_id = st.session_state['user_id']
    st.title('–ì—Ä–∞—Ñ–æ–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è„Äá')
    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞"):
        with st.form("filter", border=False):
            select_tags = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—ç–≥–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", list(get_all_tags(user_id).keys()))
            if st.form_submit_button('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å'):
                selected_tags = select_tags
            else:
                selected_tags = []
    
    nodes, edges = prepare_rendering_data(user_id, selected_tags)

    elements = {"nodes": nodes, "edges": edges}
    settings = st.session_state['settings']
    node_styles = [
        NodeStyle(label='NOTE', color=settings['node_color'], caption='title', icon='description')
    ]
    edge_styles = [
        EdgeStyle(label='EDGE', color=settings['edge_color'], labeled=False, directed=settings['directed'], curve_style=settings['edge_curve']),
    ]
    layout = {'name': settings['layout'], 'animate': 'end', 'componentSpacing': 80}



    # —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    def onchange_callback():
        val = st.session_state["xyz"]
        if val["action"] == "expand":
            node_id = val["data"]["node_ids"][0]  # –ü–æ–ª—É—á–∞–µ–º ID —É–∑–ª–∞
            print_note_dialog(node_id)
        elif val["action"] == "remove":
            pass

    st_link_analysis(elements=elements, node_styles=node_styles, edge_styles=edge_styles, layout=layout, enable_node_actions=True, on_change=onchange_callback, height=500, key='xyz')

if __name__ == "__main__":
    if 'authenticated' in st.session_state and st.session_state['authenticated']:
        show_visualizer()
